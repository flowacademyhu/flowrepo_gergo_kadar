{
	"info": {
		"_postman_id": "c154ebca-ec5e-4f38-b587-9c6c7282a0c9",
		"name": "Spells",
		"description": "First request is for same basic response tests.\n\nSecond request is for checking response data, which\n\nis more informative for end users.\n\nCollection for collection runner.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Spells - basic",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is there\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    \r",
							"  pm.expect(jsonData).to.be.an(\"array\");\r",
							"  console.log(jsonData[0]);\r",
							"});\r",
							"\r",
							"pm.test(\"Test key_ id\", () => {\r",
							"pm.expect(jsonData[0].id).to.be.a(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Response has any key\", () =>{\r",
							"pm.expect(jsonData[0]).to.have.any.keys(\"id\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/Spells",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"Spells"
					]
				}
			},
			"response": []
		},
		{
			"name": "Spells - body data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    \r",
							"  pm.expect(jsonData).to.be.an(\"array\");\r",
							"  console.log(jsonData[0]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has all key\", () =>{\r",
							"pm.expect(jsonData[0]).to.have.all.keys(\"id\", \"name\", \"incantation\", \"effect\",\r",
							"\"canBeVerbal\", \"type\", \"light\", \"creator\" )\r",
							"});\r",
							"\r",
							"pm.test(\"Test name_value name\", () => {\r",
							"pm.expect(jsonData[0].name).to.be.a(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Test canBeVerbal_value canBeVerbal\", () => {\r",
							"pm.expect(jsonData[0].canBeVerbal).to.be.a(\"boolean\")\r",
							"});\r",
							"\r",
							"pm.test(\"Test creator_value\", () => {\r",
							"pm.expect(jsonData[0].creator).to.be.a(\"null\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/Spells",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"Spells"
					]
				}
			},
			"response": []
		},
		{
			"name": "Spells - request one of them",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has all key\", () =>{\r",
							"pm.expect(jsonData).to.have.all.keys(\"id\", \"name\", \"incantation\", \"effect\",\r",
							"\"canBeVerbal\", \"type\", \"light\", \"creator\" )\r",
							"});\r",
							"\r",
							"pm.test(\"Test name_value name\", () => {\r",
							"pm.expect(jsonData.name).to.be.a(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Test name_value name equal O.C.\", () => {\r",
							"pm.expect(jsonData.name).to.eql(\"Opening Charm\")\r",
							"});\r",
							"\r",
							"pm.test(\"Test effect_value to be a string\", () => {\r",
							"pm.expect(jsonData.effect).to.be.a(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Test creator_value\", () => {\r",
							"pm.expect(jsonData.creator).to.be.a(\"null\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/Spells/fbd3cb46-c174-4843-a07e-fd83545dce58",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"Spells",
						"fbd3cb46-c174-4843-a07e-fd83545dce58"
					]
				}
			},
			"response": []
		}
	]
}